#platform=x86, AMD64, or Intel EM64T
#version=DEVEL

#---------------------------------------------------------------------------------
# System installation and partitioning

# Install OS instead of upgrade
install

# Use CDROM installation media
cdrom

# Use text mode install
text

# Do not configure the X Window System
skipx

# Install the bootloader with automatic settings
bootloader

#---------------------------------------------------------------------------------
# System partitioning

# Clear the Master Boot Record
zerombr

# Remove any partitions in the system to be installed
clearpart --all --initlabel

# create both the boot and /boot/efi in case the system is EFI-compatible
part /boot --fstype="ext4" --ondisk=sda --size=1024 --label=boot
part /boot/efi --fstype="efi" --ondisk=sda --size=200 --label=EFIBOOT

# Set LVM as the partioning type, let it grow from an initial size on the main drive
part pv.01      --size=1000     --grow  --ondisk=sda

# Create the main volume group in the physical volume
volgroup vg00 pv.01

# Create the logical volumes in accordance with the CIS Benchmark
logvol swap               --vgname=vg00  --recommended  --name=swap
logvol /                  --vgname=vg00  --fstype=ext4  --name=root    --percent=40  --grow
logvol /home              --vgname=vg00  --fstype=ext4  --name=home    --percent=10  --grow  --fsoptions=nodev
logvol /tmp               --vgname=vg00  --fstype=ext4  --name=temp    --percent=10  --grow  --fsoptions=noexec,nodev,nosuid
logvol /var               --vgname=vg00  --fstype=ext4  --name=var     --percent=10  --grow
logvol /var/tmp           --vgname=vg00  --fstype=ext4  --name=vartmp  --percent=10  --grow  --fsoptions=noexec,nodev,nosuid
logvol /var/log           --vgname=vg00  --fstype=ext4  --name=log     --percent=10  --grow
logvol /var/log/audit     --vgname=vg00  --fstype=ext4  --name=audit   --percent=10  --grow

#---------------------------------------------------------------------------------
# System environment config

# Keyboard layouts
keyboard 'us'

# System language
lang en_NZ

# System timezone
timezone Pacific/Auckland

# set the root password and lock the user
rootpw --lock --iscrypted $6$PLACEHOLDERSHA512SALTEDHASHFORPASSWORD1

# Create the restricted group
group --name=netdev

# Create the sys admin
user --name=sysadmin --groups=wheel --iscrypted --password=$6$PLACEHOLDERSHA512SALTEDHASHFORPASSWORD2

# Create the restricted user
user --name=netadmin --groups=netdev --iscrypted --password=$6$PLACEHOLDERSHA512SALTEDHASHFORPASSWORD3

# System authorization information
auth --useshadow --passalgo=sha512

# SELinux configuration
selinux --enforcing

# Firewall configuration
firewall --enabled --port=514:udp,514:tcp --service=ssh

# Enable the first adapter on list and disable IPv6
network  --bootproto=dhcp --activate --noipv6

# Enable or disable services
services --disabled=postfix

# Reboot after installation
reboot --eject

#---------------------------------------------------------------------------------
# Addons
# Disable Kdump
%addon com_redhat_kdump --disable
%end

#---------------------------------------------------------------------------------
# Extra packages
%packages
net-tools
nano
wget
%include /tmp/virtualmachine
%end

#---------------------------------------------------------------------------------
# Pre processing commands
%pre --log=/tmp/ks-pre.log
#
# Following code is based on the work of Grzegorz Juszczak on tuxfixer.com
#
# Define the minimum storage in GBs
bm_storage_min_size=40
vm_storage_min_size=40

hw=$(virt-what | head -1)
if [ -z "$hw" ]; then
    whiptail --infobox --title "HARDWARE DETECTION" "Detected hardware: Bare Metal" 10 40 > /dev/console
    sleep 10
    clear
    capacity=$(fdisk -l | grep /dev/sda | cut -f 3 -d " " | cut -f 1 -d ".")
    sleep 1
    if [ "$capacity" -lt "$bm_storage_min_size" ]; then
        whiptail --infobox --title "HARD DISK REQUIREMENTS" "ERROR: not enough hard drive capacity for Bare Metal installation: $bm_storage_min_size GB. System will reboot now." 10 50 > /dev/console
        sleep 15
        reboot --eject
    else
        echo "" > /tmp/virtualmachine
    fi
elif [ "$hw" == "vmware" ]; then
    whiptail --infobox --title "HARDWARE DETECTION" "Detected hardware: EmC VMWare" 10 40 > /dev/console
    sleep 10
    clear
    capacity=$(fdisk -l | grep /dev/sda | cut -f 3 -d " " | cut -f 1 -d ".")
    sleep 1
    if [ "$capacity" -lt "$vm_storage_min_size" ]; then
        whiptail --infobox --title "HARD DISK REQUIREMENTS" "ERROR: not enough hard drive capacity for VMWare installation: $vm_storage_min_size GB. System will reboot now." 10 50 > /dev/console
        sleep 15
        reboot
    else
        echo "open-vm-tools" > /tmp/virtualmachine
        echo "fuse" >> /tmp/virtualmachine
        echo "fuse-libs" >> /tmp/virtualmachine
        echo "libdnet" >> /tmp/virtualmachine
        echo "libdrm" >> /tmp/virtualmachine
        echo "libicu" >> /tmp/virtualmachine
        echo "libmspack" >> /tmp/virtualmachine
        echo "libpciaccess" >> /tmp/virtualmachine
        echo "libtool-ltdl" >> /tmp/virtualmachine
        echo "libxslt" >> /tmp/virtualmachine
        echo "pciutils" >> /tmp/virtualmachine
        echo "xmlsec1" >> /tmp/virtualmachine
        echo "xmlsec1-openssl" >> /tmp/virtualmachine
    fi
elif [ "$hw" == "hyperv" ]; then
    whiptail --infobox --title "HARDWARE DETECTION" "Detected hardware: Microsoft Hyper-V" 10 40 > /dev/console
    sleep 10
    clear
    capacity=$(fdisk -l | grep /dev/sda | cut -f 3 -d " " | cut -f 1 -d ".")
    sleep 1
    if [ "$capacity" -lt "$vm_storage_min_size" ]; then
        whiptail --infobox --title "HARD DISK REQUIREMENTS" "ERROR: not enough hard drive capacity for Hyper-V installation: $vm_storage_min_size GB. System will reboot now." 10 50 > /dev/console
        sleep 15
        reboot
    else
        echo "hyperv-daemons" > /tmp/virtualmachine
        echo "hyperv-daemons-license" >> /tmp/virtualmachine
        echo "hypervfcopyd" >> /tmp/virtualmachine
        echo "hypervkvpd" >> /tmp/virtualmachine
        echo "hypervvssd" >> /tmp/virtualmachine
    fi
else
    whiptail --infobox --title "HARDWARE DETECTION" "WARNING: The following platform is not recognized: $hw. System will reboot now." 10 40 > /dev/console
    sleep 10
    reboot
fi
%end

#---------------------------------------------------------------------------------
# Post processing commands in a non chroot env
%post --nochroot --log=/mnt/sysimage/root/ks-post-nochroot.log

# Edit the login message
rm /mnt/sysimage/etc/issue
echo -e "System \\\n\nTime \\\t\n" >> /mnt/sysimage/etc/issue

# Edit GRUBs name
sed -i 's/^GRUB_DISTRIBUTOR.*/GRUB_DISTRIBUTOR="BlackBox Appliance System"/' /mnt/sysimage/etc/default/grub

# Create the restricted bash and assign to limited user, chsh is not used as system is not yet initialized
cp /mnt/sysimage/bin/bash /mnt/sysimage/bin/rbash
echo '/bin/rbash' >> /mnt/sysimage/etc/shells
sed -i '/^netadmin/s/\x2fbin\x2fbash/\x2fbin\x2frbash/' /mnt/sysimage/etc/passwd

# create bin folder and link restricted binaries
mkdir /mnt/sysimage/home/netadmin/bin
ln -s /usr/bin/nmtui /mnt/sysimage/home/netadmin/bin/
ln -s /usr/bin/nmcli /mnt/sysimage/home/netadmin/bin/

# Edit the .bash_profile of the user to limit binaries
sed -i 's/^PATH.*/PATH=\x24HOME\x2fbin/' /mnt/sysimage/home/netadmin/.bash_profile

# Edit the .bashrc in case the PATH gets overriden before bash_profile
echo -e 'PATH=\x24HOME\x2fbin' >> /mnt/sysimage/home/netadmin/.bashrc
echo -e 'export PATH' >> /mnt/sysimage/home/netadmin/.bashrc

# Remove autocomplete so as to not allow to autowrite the filesystem structure
cat /mnt/sysimage/etc/inputrc > /mnt/sysimage/home/netadmin/.inputrc
echo "set disable-completion on" >> /mnt/sysimage/home/netadmin/.inputrc

# Add after login message for restricted user
echo 'echo -e "\nHi!, You have logged on with the network admin user.\n\nThe available commands are:\n\n- nmcli - Query and control NetworkManager devices.\n- nmtui - Configure your system\x27s network information and hostname.\n\nYour activity is being logged.\n"' >> /mnt/sysimage/home/netadmin/.bash_profile

# Lock the .bash_profile and .inputrc of the user to only be unlockable by root
chattr +i /mnt/sysimage/home/netadmin/.bashrc
chattr +i /mnt/sysimage/home/netadmin/.inputrc
chattr +i /mnt/sysimage/home/netadmin/.bash_profile

# Disable ssh commands for the restricted user group
echo "Match Group netdev" >> /mnt/sysimage/etc/ssh/sshd_config
echo -e "\tForceCommand none" >> /mnt/sysimage/etc/ssh/sshd_config
echo -e "\tAllowTcpForwarding no" >> /mnt/sysimage/etc/ssh/sshd_config
echo -e "\tGatewayPorts no" >> /mnt/sysimage/etc/ssh/sshd_config
echo -e "\tX11Forwarding no" >> /mnt/sysimage/etc/ssh/sshd_config

# Create access policy to allow restricted user to only modify networking configuration
echo -e "[Network Manager authorisation]\nIdentity=unix-group:netdev\nAction=org.freedesktop.NetworkManager.*;org.freedesktop.NetworkManager.settings.modify.system\nResultAny=yes\nResultInactive=yes\nResultActive=yes\n" >> /mnt/sysimage/etc/polkit-1/localauthority/50-local.d/90-nm-netdev.pkla

# Disable Ctrl-Alt-Del at system level to disallow KVM reboots unless VM KVM user has privs in the hypervisor
ln -sf /dev/null mnt/sysimage/etc/systemd/system/ctrl-alt-del.target

# Create the after installation bootstrap service
cp /run/install/repo/scripts/bootstrap_install.service /mnt/sysimage/etc/systemd/system/bootstrap_install.service
cp /run/install/repo/scripts/post_installation.sh /mnt/sysimage/usr/bin/post_installation.sh

chmod 644 /mnt/sysimage/usr/bin/post_installation.sh
chmod 644 /mnt/sysimage/etc/systemd/system/bootstrap_install.service

%end

#---------------------------------------------------------------------------------
# Process post in a chroot env
%post --log=/tmp/ks-post-chroot.log
systemctl enable bootstrap_install

%end
